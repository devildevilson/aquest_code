-- интерфейс, как он должен работать? я изначально планировал сделать слои в с++
-- то есть пихаем функции луа по слоям, и вызываем их, когда нам окно стало не нужно
-- закрываем слой, проблема в том что мне приходится самому прикидывать что мне нужно, а что нет
-- когда закрыть интерфейс, когда вызвать меню, из с++ не очень понятно когда что нужно сделать
-- у меня в любом случае в игре будет по крайней мере одна функция интерфейса,
-- которая в любом случае будет запускаться каждый кадр, почему бы не сделать
-- тогда весь интерфейс в этой функции? то есть всю нужную информацию для игрока будем передавать
-- в эту функцию, а в ней уже рисовать какие нибудь окна, например: полезные кнопки (персонаж, дипломатия и проч),
-- валюта (деньги, престиж и проч), в какой то момент нам потребуется открывать окна,
-- например окно персонажа, и закрывать их же, все это вполне можно сделать в единой функции
-- тяжелый ли луа? мне нетолько нужно тычить по кнопкам интерфейса, но и получать информацию
-- от выделения мышкой игровых объектов, проще расшарить информацию о выделении в луа и тут выбрать
-- что полезно, а что нет, остается еще вопрос что нужно сделать с парочкой команд
-- которые оттдавать только мышкой, например передвижение войск, их видимо нужно будет делать
-- через c++, другое дело что меня напрягает что так функциия может быть довольно тяжелой
-- с другой стороны, на что еще у меня тратится время кадра?, сделать 30 фпс - это решит наверное
-- 90% проблем с производительностью, что со строками для эвентов?
-- в эвентах нету простых строк с понятными источниками данных, там мы должны сначала обойти ряд условий
-- и только потом мы получим объект у которого нужно взять какие то данные, то есть когда к нам придет
-- эвент нам нужно будет еще его "скомпилировать" видимо мы должны получить какую то функцию
-- для отрисовки интерфейса эвента или таблицу с данными (строки или тоже функции)
-- клик мыши по выделенному объекту должен приводить к появлению окна объекта
-- короче клики мыши нужно обрабатывать, мож инпут тоже частично в луа выбросить? напрягает прост
-- производительность, но я еще не замерял, пока что просто домыслы

-- я тут подумал, наверное лучше сделать таблицы типа localization или utils
-- не глобальными, а по require, так нагляднее + не захламляется глобал + я могу из скрипта контролировать
-- что мне нужно, а что нет, но тут сложность с основными типами возникает, их нужно все же в глобале где то держать,
-- короче нужно разделить типы и функции (+ константы)

-- в moonnuklear есть много вещей которые я бы не хотел вытаскивать наружу, нужно будет еще
-- поработать над ним, скрыв "плохой" функционал
local nk = require("apates_quest.moonnuklear") -- обращение к модулям лучше сделать через точку

local int_table = {}

-- игра у меня пошаговая, а значит будет минимум два состояния игры: ход игрока и ожидание между ходами
-- как об этом узнать из луа? у нас в любом случае должен быть некий игровой контекст, откуда мы например
-- получим персонажа игрока, по идее рядом должен находиться способ узнать состояние игры
function start_turn(nk_ctx, game_ctx, timer)
  local char = game_ctx.character
  --game_ctx.old_state
  local player_turn = game_ctx.current_state
  -- мне пригодится для анимации знать когда именно произойдет переход
  -- от одного состояния в другое
  -- скорее всего будет удобно сделать все в одной функции
end

function interface(nk_ctx, game_ctx, timer)
  -- функцию еще наверное нужно будет как то подготовить
  -- в локализации будет храниться видимо не только строки
  -- но и массивы и числа, но не другое
  -- форматирование строки будет происходить силами другой библиотеки
  -- плюрялизация будет наверное прикручена сверху
  local str = localization.get("en", "month.jan")
end
