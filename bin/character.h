#ifndef CHARACTER_H
#define CHARACTER_H

#include <cstdint>
#include <unordered_map>
#include <unordered_set>
#include "utils/id.h"

// взаимоотношения между персонажами должны быть сделанны с помощью таблицы
// я думал использовать какую-нибудь базу данных 
// для того чтобы не писать самому всякие вещи связанные с сериализацией
// но я беспокоюсь на счет скорости таких бд, то есть мне нужно будет 
// готовить sql запрос для взаимодействия с бд, а это парсинг строки
// это вопервых, во вторых когда работает ии нужно будет обращаться к бд
// нужно чтобы ход не превращался в ход в вахе
// почекал sqlite (бд в памяти), там по идее довольно быстро парсится
// строка, нужно прикинуть как выглядит структура для персонажа

namespace devils_engine {
  namespace core {
    struct attribute {
      uint32_t icon;
      uint32_t value;
      uint32_t name_str;        // индекс названия аттрибута
      uint32_t description_str;
    };
    
    struct titulus {
      enum class type {
        baron,
        duke,
        king,
        imperial
      };
      
      // титул может быть формальным или реальным
      // у титулов существует иерархия
      // имперский титул, королевский титул, герцогский титул, титул барона
      // барон - самый нижний титул, остальные составляются из баронов, герцогств и королевств
      // еще нужно учесть что существует де-юре и де-факто владение титулами
      // де-юре - это земли в массиве childs, а де-факто - это владения персонажа для которого этот титул является определяющим
      // если титул не является главным, то де-факто - все земли у владельца титула
      //utils::id id; // тут опять же id не будет наверное
      enum type type;
      uint32_t count;
      uint32_t* childs; // реальный титул обладает определенным набором титулов нижнего уровня
      uint32_t parent;
      uint32_t character; // у титула может быть только один владелец
      uint32_t name_str;
      uint32_t description_str;
      titulus* next;
    };
    
    struct family {
      uint32_t dinasty;
      uint32_t parents[2];
      uint32_t grandparents[4];
      uint32_t children[64];
      uint32_t siblings[64];
      // мертвые жены то тоже должны учитываться
      // первые 5 (?) индексов - это текущая жена + несколько наложниц
      uint32_t consorts[64];
    };
    
    struct character {
      // портрет
      // набор индексов для разных типов частей лица, скорее всего нужно будет придумать особый рендер для всего этого
      uint32_t face_array[10]; // тут скорее массив изображений
      // характеристики
      // числа в массиве с иконками и описанием, скорее всего некоторые характеристики будут скрытыми
      attribute* attributes; // количество аттрибутов должно быть одинаково для всех персонажей
      uint32_t born_date;
      uint32_t name_str;
      uint32_t culture;  // указатели?
      uint32_t religion;
      uint32_t money;
      uint32_t blood_dinasty;
      uint32_t current_dinasty;
      uint32_t suzerain; // независимый если отсутствует
      uint32_t parents[2];
      uint32_t consort;
      
      // для персонажей нужно несколько указателей навигации
      character* prev; // предыдущий родственник
      character* next; // следующий
      titulus* titules;
      //character* consort;
      // так же тут должна быть информация об культуре, религии, количеству войск и владений, количеству вассалов,
      // деньги?, престиж?, набожность? (нужно придумать какую нибудь свою систему с престижем и набожностью)
      // семья
      // кровные отношения между родственниками (отец, брат, сват и проч)
      // возможно здесь указатель на династию, а оттуда выводятся все родственники, хотя может и нет
      // в цк2 выделены отдельно родители (2), деды (4), учителя (1?), дети (много, но вряд ли больше 128), и братья, сестры (много, но тоже скорее всего меньше 128)
      //struct family family;
      // отношения
      // отношения как и семью лучше всего засунуть в какую нибудь огромную таблицу (типа базы данных)
      // по хорошему отношения должны расчитываться на месте
      // я посмотрел, все базы данных в памяти требуют парсить строку
      // мне либо надо самому таблицу сделать, либо может быть использовать какой нибудь SQLite
      // титулы
      // формальные и реальные титулы составляют государство
      //std::vector<titulus*> titles;
      // претензии?, войны и альянсы?
      // куда то нужно разместить двор и вассалов, некую дипломатию
      // сюзерен и вассалы
      //std::vector<uint32_t> vassals; // вассалов вообще не сказать чтобы много, до 100 наверное
    };
    
    // этого персонажа мы рисуем в данный момент 
    // прежде чем нарисовать панельку, мы должны получить все данные о персонаже
    // все титулы, родственников, вассалов, двор
    // нарисовать портреты
    struct unpacked_character {
      std::vector<uint32_t> court;
      std::vector<uint32_t> vassals;
      std::vector<uint32_t> titles;
      // семья
      std::vector<uint32_t> government; // совет
    };
    
    // персонажи по идее не должны удаляться по ходу игры
    // нет, наверное должны, но только какие? если в династии нет живых членов?
    // какие упоминания могут быть у персонажей? кровь, убийство, ???
    // есть временные персонажи, по идее их плодить не нужно, 
    // новые династии без земли должны исчезать после смерти персонажа
    // (придворные при смерти вряд ли должны оставаться в памяти)
    // то есть наверное нужно оставить возможность удалить кого нибудь
    // теперь вопрос как хранить? мультимапа?
    // мне нужно быстро генерировать списки: семья, двор, вассалы, совет, титулы
    struct character_container {
      std::vector<character> characters;
      std::vector<dynasty> dynasties;
    };
  }
}

// нам нужно нарисовать портреты всех персонажей
// портретов будет довольно много + 
// желательно чтобы не было лагов при открывании панельки персонажа
// детей (а значит братьев и сестер) может быть реально сильно больше чем 64
// особенно если персонаж бессмертен
// возможно имеет смысл хранить информацию всю в династии
// точнее она и так будет храниться в династии, нужно только ее оттуда подгрузить
// в персонаже должен хранится указатель на династию
// а из династии мы загрузим все данные о семье
// так же бы сделать и с титулами и с вассалами и видимо со двором
// вот и получается база данных
// у персонажа: сюзерен, династия родная, династия текущая, родители + аттрибуты и проч
// жену получаем из переменной consort, а наложниц ищем в таблице по той же переменной
// когда наложница умирает, то нужно убрать ее из поиска
// а вот мерных жен нужно учитывать
// дружеские отношения? 

// титулов строго ограниченное число + не может быть один титул у удвух персонажей
// а значит мы можем положить такого рода данные в список по указателям

#endif
