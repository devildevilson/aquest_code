#include "prime_numbers.h"

// несколько простых чисел, все простые числа до 32бит занимают ~6гб

constexpr size_t make_prime(const size_t power, const size_t sub_const) {
  return (1ull << power) - sub_const;
}

// sanity
static_assert(make_prime(8, 5) == 251);
static_assert(make_prime(8, 15) == 241);
static_assert(make_prime(8, 17) == 239);

#define MAKE_PRIMES(power, N0, N1, N2, N3, N4, N5, N6, N7, N8, N9) \
  make_prime(power, N0), make_prime(power, N1), make_prime(power, N2), make_prime(power, N3), make_prime(power, N4), \
  make_prime(power, N5), make_prime(power, N6), make_prime(power, N7), make_prime(power, N8), make_prime(power, N9)

namespace devils_engine {
  namespace utils {
    const size_t prime_numbers[] = {
      MAKE_PRIMES( 8, /**/ 5, 15, 17, 23, 27, 29, 33, 45, 57, 59),
      MAKE_PRIMES( 9, /**/ 3, 9, 13, 21, 25, 33, 45, 49, 51, 55),
      MAKE_PRIMES(10, /**/ 3, 5, 11, 15, 27, 33, 41, 47, 53, 57),
      MAKE_PRIMES(11, /**/ 9, 19, 21, 31, 37, 45, 49, 51, 55, 61),
      MAKE_PRIMES(12, /**/ 3, 5, 17, 23, 39, 45, 47, 69, 75, 77),
      MAKE_PRIMES(13, /**/ 1, 13, 21, 25, 31, 45, 69, 75, 81, 91),
      MAKE_PRIMES(14, /**/ 3, 15, 21, 23, 35, 45, 51, 65, 83, 111),
      MAKE_PRIMES(15, /**/ 19, 49, 51, 55, 61, 75, 81, 115, 121, 135),
      MAKE_PRIMES(16, /**/ 15, 17, 39, 57, 87, 89, 99, 113, 117, 123),
      MAKE_PRIMES(17, /**/ 1, 9, 13, 31, 49, 61, 63, 85, 91, 99),
      MAKE_PRIMES(18, /**/ 5, 11, 17, 23, 33, 35, 41, 65, 75, 93),
      MAKE_PRIMES(19, /**/ 1, 19, 27, 31, 45, 57, 67, 69, 85, 87),
      MAKE_PRIMES(20, /**/ 3, 5, 17, 27, 59, 69, 129, 143, 153, 185),
      MAKE_PRIMES(21, /**/ 9, 19, 21, 55, 61, 69, 105, 111, 121, 129),
      MAKE_PRIMES(22, /**/ 3, 17, 27, 33, 57, 87, 105, 113, 117, 123),
      MAKE_PRIMES(23, /**/ 15, 21, 27, 37, 61, 69, 135, 147, 157, 159),
      MAKE_PRIMES(24, /**/ 3, 17, 33, 63, 75, 77, 89, 95, 117, 167),
      MAKE_PRIMES(25, /**/ 39, 49, 61, 85, 91, 115, 141, 159, 165, 183),
      MAKE_PRIMES(26, /**/ 5, 27, 45, 87, 101, 107, 111, 117, 125, 135),
      MAKE_PRIMES(27, /**/ 39, 79, 111, 115, 135, 187, 199, 219, 231, 235),
      MAKE_PRIMES(28, /**/ 57, 89, 95, 119, 125, 143, 165, 183, 213, 273),
      MAKE_PRIMES(29, /**/ 3, 33, 43, 63, 73, 75, 93, 99, 121, 133),
      MAKE_PRIMES(30, /**/ 35, 41, 83, 101, 105, 107, 135, 153, 161, 173),
      MAKE_PRIMES(31, /**/ 1, 19, 61, 69, 85, 99, 105, 151, 159, 171),
      MAKE_PRIMES(32, /**/ 5, 17, 65, 99, 107, 135, 153, 185, 209, 267),
      MAKE_PRIMES(33, /**/ 9, 25, 49, 79, 105, 285, 301, 303, 321, 355),
      MAKE_PRIMES(34, /**/ 41, 77, 113, 131, 143, 165, 185, 207, 227, 281),
      MAKE_PRIMES(35, /**/ 31, 49, 61, 69, 79, 121, 141, 247, 309, 325),
      MAKE_PRIMES(36, /**/ 5, 17, 23, 65, 117, 137, 159, 173, 189, 233),
      MAKE_PRIMES(37, /**/ 25, 31, 45, 69, 123, 141, 199, 201, 351, 375),
      MAKE_PRIMES(38, /**/ 45, 87, 107, 131, 153, 185, 191, 227, 231, 257),
      MAKE_PRIMES(39, /**/ 7, 19, 67, 91, 135, 165, 219, 231, 241, 301),
      MAKE_PRIMES(40, /**/ 87, 167, 195, 203, 213, 285, 293, 299, 389, 437),
      MAKE_PRIMES(41, /**/ 21, 31, 55, 63, 73, 75, 91, 111, 133, 139),
      MAKE_PRIMES(42, /**/ 11, 17, 33, 53, 65, 143, 161, 165, 215, 227),
      MAKE_PRIMES(43, /**/ 57, 67, 117, 175, 255, 267, 291, 309, 319, 369),
      MAKE_PRIMES(44, /**/ 17, 117, 119, 129, 143, 149, 287, 327, 359, 377),
      MAKE_PRIMES(45, /**/ 55, 69, 81, 93, 121, 133, 139, 159, 193, 229),
      MAKE_PRIMES(46, /**/ 21, 57, 63, 77, 167, 197, 237, 287, 305, 311),
      MAKE_PRIMES(47, /**/ 115, 127, 147, 279, 297, 339, 435, 541, 619, 649),
      MAKE_PRIMES(48, /**/ 59, 65, 89, 93, 147, 165, 189, 233, 243, 257),
      MAKE_PRIMES(49, /**/ 81, 111, 123, 139, 181, 201, 213, 265, 283, 339),
      MAKE_PRIMES(50, /**/ 27, 35, 51, 71, 113, 117, 131, 161, 195, 233),
      MAKE_PRIMES(51, /**/ 129, 139, 165, 231, 237, 247, 355, 391, 397, 439),
      MAKE_PRIMES(52, /**/ 47, 143, 173, 183, 197, 209, 269, 285, 335, 395),
      MAKE_PRIMES(53, /**/ 111, 145, 231, 265, 315, 339, 343, 369, 379, 421),
      MAKE_PRIMES(54, /**/ 33, 53, 131, 165, 195, 245, 255, 257, 315, 327),
      MAKE_PRIMES(55, /**/ 55, 67, 99, 127, 147, 169, 171, 199, 207, 267),
      MAKE_PRIMES(56, /**/ 5, 27, 47, 57, 89, 93, 147, 177, 189, 195),
      MAKE_PRIMES(57, /**/ 13, 25, 49, 61, 69, 111, 195, 273, 363, 423),
      MAKE_PRIMES(58, /**/ 27, 57, 63, 137, 141, 147, 161, 203, 213, 251),
      MAKE_PRIMES(59, /**/ 55, 99, 225, 427, 517, 607, 649, 687, 861, 871),
      MAKE_PRIMES(60, /**/ 93, 107, 173, 179, 257, 279, 369, 395, 399, 453),
      MAKE_PRIMES(61, /**/ 1, 31, 45, 229, 259, 283, 339, 391, 403, 465),
      MAKE_PRIMES(62, /**/ 57, 87, 117, 143, 153, 167, 171, 195, 203, 273),
      MAKE_PRIMES(63, /**/ 25, 165, 259, 301, 375, 387, 391, 409, 457, 471),
      /*64*/ 18446744073709551557ull, 18446744073709551533ull, 18446744073709551521ull, 18446744073709551437ull, 18446744073709551427ull, 
             18446744073709551359ull, 18446744073709551337ull, 18446744073709551293ull, 18446744073709551263ull, 18446744073709551253ull
    };
    
    const size_t prime_numbers_count = sizeof(prime_numbers) / sizeof(prime_numbers[0]);
    
    static_assert(prime_numbers_count % 10 == 0);
  }
}
