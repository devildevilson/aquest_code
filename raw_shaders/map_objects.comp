#version 450

#extension GL_GOOGLE_include_directive : enable
#include "../render/shared_structures.h"
#include "../render/shared_render_utility.h"
#include "../utils/shared_mathematical_constant.h"

layout(set = 0, binding = 0) uniform Camera {
  mat4 viewproj;
  mat4 view;
  vec4 pos;
  vec4 dir;
  uvec4 dim;
  // нужно добавить направление курсора
  vec4 cursor_dir;
} camera;

layout(std140, set = 1, binding = 0) readonly buffer tiles_buffer {
  light_map_tile_t tiles[];
};

layout(std140, set = 1, binding = 1) readonly buffer biome_data_buffer {
  packed_biome_data_t packed_biome_datas[];
};

layout(std140, set = 1, binding = 2) readonly buffer tile_points_buffer {
  vec4 tile_points[];
};

layout(std140, set = 1, binding = 3) readonly buffer triangles_buffer {
  packed_fast_triangle_t triangles[];
};

layout(std140, set = 1, binding = 4) readonly buffer triangles_tile_indices_buffer {
  uvec4 triangles_tile_indices[];
};

layout(std140, set = 1, binding = 5) readonly buffer world_structure_buffer {
  uvec4 world_structures[];
};

layout(std140, set = 1, binding = 6) readonly buffer additional_index_buffer {
  additional_data_t additional_indices[]; // тут три индекса армий добавится: армия, герой, и проходящая мимо армия, добавятся еще замена армий
};

layout(std140, set = 1, binding = 7) readonly buffer army_data_buffer { // эти вещи увеличаться в размерах
  army_data_t army_datas[];
};

layout(std140, set = 2, binding = 0) buffer tile_indirect_buffer {
  uvec4 pen_tiles_indirect;
  uvec4 pen_tiles_data;
  uvec4 hex_tiles_indirect;
  uvec4 hex_tiles_data;
  uvec4 borders_indirect;
  uvec4 borders_data;
  uvec4 walls_indirect;
  uvec4 walls_data;
  uvec4 structures_indirect;
  uvec4 structures_data;
  uvec4 heraldies_indirect;
  uvec4 heraldies_data;
  uvec4 dispatch_indirect;
  // сюда можно засунуть фрустум
  frustum_t frustum;

  // сюда пихнем бокс выделения
  // нужно сюда еще добавить несколько оффсетов для objects_indices буфера (он супер большой)
  //

  aabb_t selection_box;
  frustum_t selection_frustum;

  // uvec4 objects_indirect; // 256 штук?
  // uvec4 objects_data;
  // uvec4 biome_data[256*2/4];
  biome_objects_data_t biome_objects_data[MAX_BIOMES_COUNT];
};

layout(std140, set = 2, binding = 1) buffer tiles_indices_buffer {
  instance_data_t tiles_indices[];
};

layout(std140, set = 2, binding = 2) buffer borders_indices_buffer {
  instance_data_t borders_indices[];
};

layout(std140, set = 2, binding = 3) buffer walls_indices_buffer {
  instance_data_t walls_indices[];
};

layout(std140, set = 2, binding = 4) buffer objects_indices_buffer {
  instance_data_t objects_indices[];
};

layout(std140, set = 2, binding = 5) buffer structures_indices_buffer {
  instance_data_t structures_indices[]; // этот буфер будет в хост памяти
};

layout(std140, set = 2, binding = 6) buffer heraldies_indices_buffer { // этот буфер перестанет существовать
  instance_data_t heraldies_indices[];
};

#define FAR_PLANE 256.0f
#define WORK_GROUP 256

//shared uint min_dist;

float distance2(const vec4 a, const vec4 b);
uint get_accel_triangle_tile_index(const uint index);
world_structure_t unpack(const uvec4 data);
void set_indices_borders_buffer(const uint index, const uint offset);
void set_indices_walls_buffer(const uint index, const uint offset);
void set_indices_armies_buffer(const uint index, const uint offset);
//bool test_ray_aabb(const vec4 ray_pos, const vec4 ray_dir, const vec4 box_center, const vec4 box_extents, inout float dist);

layout(local_size_x = WORK_GROUP, local_size_y = 1, local_size_z = 1) in;

// рендер поменялся, теперь у нас первые 12 слотов в буфере - это пентагоны
// причем не все 12 слотов заняты, остальные после 12 индексы заняты полностью

void main() {
  const uint local_index = gl_GlobalInvocationID.x; // * (PACKED_TILE_INDEX_COEF+1)
  if (local_index >= hex_tiles_indirect.y + pen_tiles_indirect.y) return;

  const uint final_index = local_index >= pen_tiles_indirect.y ? local_index + 12 : local_index;
  const uint inst_index = final_index / 4;
  const uint vec_index  = final_index % 4;
  const uint tile_index = tiles_indices[inst_index].index[vec_index]; //  / PACKED_TILE_INDEX_COEF
  // было бы неплохо использовать предыдущие буфферы
  // я могу использовать borders_indices, walls_indices, objects_indices
  // нужно сделать эти буферы какого то одного большого размера

  // тут я в общем то ничего особо делать не буду, кроме того что заполнять буферы индексами
  // возможно нужно посчитать пересечение луча и тайла (эт долго скорее всего)
  // но было бы неплохо посчитать выделение герба, кстати для этого нужно просто сделать бокс
  //

  const bool valid_frustum = dot(selection_frustum.planes[0], selection_frustum.planes[0]) != 0.0f;
  //const bool valid_frustum = dot(frustum.planes[0], frustum.planes[0]) != 0.0f;

  const light_map_tile_t tile = tiles[tile_index];

  const uint point_index = tile.tile_indices.x;
  const vec4 point = tile_points[point_index];
  const bool ret = frustum_test(selection_frustum, point, 1.0f);
  if (valid_frustum && ret) {
    const uint offset = atomicAdd(heraldies_indirect.y, 1);
    const uint vec_index = offset / 4;
    const uint slot_index = offset % 4;
    structures_indices[vec_index].index[slot_index] = tile_index;
  }

  const additional_data_t additional_tile_data = additional_indices[tile_index];
  const uint structure_index = additional_tile_data.data[0].x;
  if (structure_index != GPU_UINT_MAX) {
    const uint offset = atomicAdd(borders_indirect.y, 1); // PACKED_INDEX_COEF+1
    set_indices_borders_buffer(tile_index, offset);
  }

  const uint heraldy_index = additional_tile_data.data[0].y;
  if (heraldy_index != GPU_UINT_MAX) {
    const uint offset = atomicAdd(walls_indirect.y, 1); // PACKED_INDEX_COEF+1
    set_indices_walls_buffer(tile_index, offset);

    if (dot(camera.cursor_dir, camera.cursor_dir) > 0.0f) {
      const float tile_height = uintBitsToFloat(tile.tile_indices.w);
      const uint height_layer = compute_height_layer(tile_height);
      const float final_height = layer_height * height_layer;

      const float zoom = uintBitsToFloat(camera.dim.z);
      const float height = mix(1.0f, 10.0f, zoom); // высоту так делать не нужно, либо сделать в сторону камеры

      // как проверить геральдику?
      const uint point_index = tiles[tile_index].tile_indices.x;
      const vec4 point = tile_points[point_index];
      const vec4 normal = vec4(normalize(point.xyz), 0.0f);
      const vec4 final_point = point + normal * (height + final_height * render_tile_height);
      // герб должен быть на некоторой высоте над городом, но при этом не скрывать город
      //
      const vec4 extents = mix(vec4(0.5f, 0.5f, 0.5f, 0.0f), vec4(1.0f, 1.0f, 1.0f, 0.0f), zoom); // это мы тоже должны изменять при приближении камеры
      // проверяем луч, нужно добавить его в камеру
      float d = 100000.0f;
      const bool casting = test_ray_aabb(camera.pos, camera.cursor_dir, final_point, extents, d);
      if (casting) {
      //   // тут нужно найти минимальную дистанцию
      //   const uint val = floatBitsToUint(d);
      //   // atomicMin(tiles_data.w, val);
      //   // // как теперь запомнить индекс?
      //   // if (tiles_data.w == val) { // это плохая идея, может случиться что угодно с этим значением, моделировать мьютекс? попытаться положить позже?
      //   //   borders_data.w = tile_index;
      //   // }
      //
      //   uint lock_available = 0;
      //   do {
      //     //lock_available = atomicCompSwap(walls_data.w, 1, 0);
      //     lock_available = atomicExchange(walls_data.w, 0);
      //   } while (lock_available != 1);
      //
      //   // делаем работу
      //   if (d < uintBitsToFloat(tiles_data.w)) {
      //     tiles_data.w = val;
      //     borders_data.w = tile_index;
      //   }
      //
      //   //atomicCompSwap(mem, 0, 1);
      //   atomicExchange(walls_data.w, 1);

        // спинмьютекс невозможно сделать в шейдерах, так как в шейдерах как то непоследовательно выполняются команды
        // а значит нужно добавлять все данные в основные буферы, в принципе у меня и так и сяк в один буфер пойдет много данных
        const uint offset = atomicAdd(heraldies_indirect.y, 2);
        {
          const uint vec_index = offset / 4;
          const uint slot_index = offset % 4;
          structures_indices[vec_index].index[slot_index] = floatBitsToUint(-d); // d никогда не будет меньше нуля по идее (потенциально может быть 0, но врядли)
        }

        {
          const uint vec_index = (offset+1) / 4;
          const uint slot_index = (offset+1) % 4;
          structures_indices[vec_index].index[slot_index] = tile_index;
        }
      }
    }
  }

  // uint lock_available = 0;
  // do {
  //   lock_available = atomicCompSwap(walls_data.w, 1, 0);
  //   //lock_available = atomicExchange(walls_data.w, 0);
  // } while (lock_available != 1);
  //
  // // делаем работу
  // if (d < uintBitsToFloat(tiles_data.w)) {
  //   tiles_data.w = floatBitsToUint(d);
  //   borders_data.w = tile_index;
  // }
  //
  // //atomicCompSwap(mem, 0, 1);
  // atomicExchange(walls_data.w, 1);

  //atomicMin(tiles_data.w, floatBitsToUint(d));
  //borders_data.w

  const uint roads = additional_tile_data.data[0].z;
  if (roads != GPU_UINT_MAX) {
    // тут нужно придумать что то еще
  }

  // нужно придумать более однородный способ проверки разных вещей с меньшим количеством условий
  // нужно проверить рейкастинг (выделение при наведении) + бокс (выделение при нажатии)
  // причем кто должен выделяться а кто нет? выделяться видимо должны все, а там я решу
  // кто попадет в выделение, другое дело что армия и герой могут стоять на одной клетке
  // нужно как то разделить эти вещи
  // их еще нужно нарисовать и нужно придать им анимацию
  // что тогда должно быть в этом буфере? позиции армии и героя?
  // проблема в том что вычисляем мы все это дело двигаясь от тайлов
  // из-за чего сложно предусмотреть все ситуации с армиями и героями которые могут произойти на карте
  // определенно у меня должен быть способ получить позицию передвигающейся армии
  // множество армий может попытаться пройти через один тайл, их всех требуется выделить
  // армии должны ждать пока пройдет анимация всех армий? это неплохой баланс
  // видимо так и нужно сделать
  // что нужно указать здесь? индекс армии, должны ли армии менять картинку? было бы неплохо
  // у армий в общем то должно быть позиция и картинка, больше особо ничего не нужно для отрисовки
  // (размер? по идее нужно сделать все одного размера чтобы небыло проблем с выделением)
  // (что то еще? пока что ничего особо не приходит в голову)

  // мне нужно еще где то хранить позицию, буферов получается как то слишком много
  // можно в принципе хранить в буфере тайлов, но это жутко не эффективно

  uint army_indices_arr[3];
  army_indices_arr[0] = additional_tile_data.data[1].x;
  army_indices_arr[1] = additional_tile_data.data[1].y;
  army_indices_arr[2] = additional_tile_data.data[1].z;

  // по идее третий индекс это только передвигающаяся армия
  // один из индексов это герой
  // тут нужно видимо делать какие то оффсеты, чтобы отличить одни индекс от другого
  // с другой стороны у армий у меня есть данные о позиции, а значит необязательно тащить
  // индексы тайлов

  for (uint i = 0; i < 3; ++i) {
    if (army_indices_arr[i] == GPU_UINT_MAX) continue;
    const uint offset = atomicAdd(structures_indirect.y, 1); // PACKED_INDEX_COEF+1
    set_indices_armies_buffer(army_indices_arr[i], offset);

  //   if (!valid_frustum) continue;
  //
  //   // тут нам как раз нужно проверить выделение
  //   const army_data_t army = army_datas[army_indices_arr[i]];
  //   const vec4 pos = vec4(army.data.xyz, 1.0f);
  //   const vec4 extent = vec4(1.0f, 1.0f, 1.0f, 0.0f);
  //
  //   // aabb_t box;
  //   // box.min = pos - extent;
  //   // box.max = pos + extent;
  //
  //   // размер объектов на карте - скорее всего какая то константа
  //   // как ее подобрать?
  //
  //   //const bool ret = intersect(box, selection_box);
  //   //const int ret = frustum_test(selection_frustum, pos, extent);
  //   const bool ret = frustum_test(selection_frustum, pos, 1.0f);
  //   //const int ret = frustum_test(frustum, pos, extent);
  //   //const bool ret = frustum_test(frustum, pos, 1.0f);
  //   if (ret) {
  //     // нужно добавить индекс в цпу буффер
  //     const uint offset = atomicAdd(heraldies_indirect.y, 1);
  //     const uint vec_index = offset / 4;
  //     const uint slot_index = offset % 4;
  //     //structures_indices[vec_index].index[slot_index] = army_indices_arr[i];
  //     structures_indices[vec_index].index[slot_index] = tile_index;
  //   }
  }
}

void set_indices_borders_buffer(const uint index, const uint offset) {
  const uint packed_tile_index = index; //  * PACKED_INDEX_COEF
  //for (uint j = 0; j < PACKED_INDEX_COEF; ++j) {
    const uint final_index = offset; // + j
    const uint vec_index = final_index / 4;
    const uint slot_index = final_index % 4;
    borders_indices[vec_index].index[slot_index] = packed_tile_index; // + j
  //}

  // const uint final_index = offset + PACKED_INDEX_COEF;
  // const uint vec_index = final_index / 4;
  // const uint slot_index = final_index % 4;
  // borders_indices[vec_index].index[slot_index] = GPU_UINT_MAX;
}

void set_indices_walls_buffer(const uint index, const uint offset) {
  const uint packed_tile_index = index; //  * PACKED_INDEX_COEF
  //for (uint j = 0; j < PACKED_INDEX_COEF; ++j) {
    const uint final_index = offset; // + j
    const uint vec_index = final_index / 4;
    const uint slot_index = final_index % 4;
    walls_indices[vec_index].index[slot_index] = packed_tile_index; // + j
  //}

  // const uint final_index = offset + PACKED_INDEX_COEF;
  // const uint vec_index = final_index / 4;
  // const uint slot_index = final_index % 4;
  // walls_indices[vec_index].index[slot_index] = GPU_UINT_MAX;
}

void set_indices_armies_buffer(const uint index, const uint offset) {
  const uint packed_tile_index = index; // * PACKED_INDEX_COEF
  //for (uint j = 0; j < PACKED_INDEX_COEF; ++j) {
    const uint final_index = offset; // + j
    const uint vec_index = final_index / 4;
    const uint slot_index = final_index % 4;
    objects_indices[vec_index].index[slot_index] = packed_tile_index; // + j
  //}

  // const uint final_index = offset + PACKED_INDEX_COEF;
  // const uint vec_index = final_index / 4;
  // const uint slot_index = final_index % 4;
  // objects_indices[vec_index].index[slot_index] = GPU_UINT_MAX;
}

// bool test_ray_aabb(const vec4 ray_pos, const vec4 ray_dir, const vec4 box_center, const vec4 box_extents, inout float dist) {
//   const vec4 box_max = box_center + box_extents;
//   const vec4 box_min = box_center - box_extents;
//
//   const vec4 ray_inv_dir = 1.0f / ray_dir;
//   float t1 = (box_min[0] - ray_pos[0])*ray_inv_dir[0];
//   float t2 = (box_max[0] - ray_pos[0])*ray_inv_dir[0];
//
//   float tmin = min(t1, t2);
//   float tmax = max(t1, t2);
//
//   for (int i = 1; i < 3; ++i) {
//       t1 = (box_min[i] - ray_pos[i])*ray_inv_dir[i];
//       t2 = (box_max[i] - ray_pos[i])*ray_inv_dir[i];
//
//       tmin = max(tmin, min(min(t1, t2), tmax));
//       tmax = min(tmax, max(max(t1, t2), tmin));
//   }
//
//   const bool ret = tmax > max(tmin, 0.0f);
//   dist = ret ? tmax : dist;
//   return ret;
//   // if (tmax > glm::max(tmin, 0.0f)) {
//   //   dist = tmin > 0.0f ? tmin : tmax;
//   //   return true;
//   // }
//   //
//   // return false;
// }
