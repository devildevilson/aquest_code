#ifndef CORE_STRUCTURES_H
#define CORE_STRUCTURES_H

#include <cstdint>
#include <vector>
#include <string>
#include <functional>
#include <array>
#include <atomic>
#include "core/declare_structures.h"

// на каждый чих нужно придумать иконки

namespace devils_engine {
  namespace ai {
    struct path_container;
  }
  
  namespace core {
    const size_t max_conditions_count = 64;
    const size_t max_effects_count = 64;
    
    enum class path_finding_state {
      idle,
      get_task,
      finding_path,
      stop,
      stopped,
    };
    
    // нужно описать тип, по нему мы будем нанимать себе в отряд 
    struct party_member_type {
      
    };
    
    // возможно будет частью персонажа
    // нужно у персонажа сделать отдельную геройскую секцию
    // героями будут ну очень малое количество людей по сравнению с общим
    // но при этом несколько геройских вещей должны быть доступны и обычным челикам
//     struct hero {
//       struct character* character;
//       std::array<stat_container, hero_stats::count> moded_stats;
//       std::array<stat_container, hero_stats::count> current_stats;
//       // графика, как отображать персов в интерфейсе? (нужно хотя бы интерфейс сделать, хаха) думаю что карточки персонажей как раз то что нужно
//       
//       hero();
//     };
    
    // нужно определиться с принципом: все что не запрещено - разрешено или все что не разрешено - запрещено
    // права != законы, права прежде всего должны как то ограничивать механики
    // например наследовать могут только мужчины, значит из некоей выборки родственников нужно выделить только мужчин
    // старше там скольки то лет, по идее здесь нужно будет только ограничить выборку, что мы можем сделать в луа
    // то есть достаточно по идее 64 (?) бит для запоминания, что можно а что нет
    // но вообще у нас есть еще законы (причем по категориям), и мехиники могут меняться и по законам
    // возможно "права" останутся только у религий, которые в этом плане будут статичными
    struct right {
      
    };
  }
}

// нужно еще придумать что делать с локализацией
// нужны файлы локализации, где мы будем брать строки по айдишнику
// есть банк строк id = en если у нас локализация en
// строки нужно еще парсить
// локализация по ключу: так проще в интерфейсе работать

// описывать решения в json
// в блоке allow указаны условия выполнения решения, в effect - то что произойдет
// они легко парсятся в словесное описание
// мне нужно определить вообще все возможные функции которые могут потребоваться в таких описаниях
// например добавить немного монет, либо мы можем определить луа функцию (но что делать с описанием?)
// для того чтобы это сработало нужно очень быстро обходить все "target" (все титулы, все города)
// и сверять все свойства, делать это каждый ход гораздо проще чем каждый кадр, но при этом
// лучше конечно чтобы я мог сбалансировать нагрузку на ход, как это делать? запускать проверку 
// по частям (500 в этом ходу 500 в следующем и проч), я должен описать интерфейс так чтобы 
// как можно сильнее сократить количество проверок, эффективно парсить требуемое по условиям
// (мне кажется парсинг легче в луа? но невозможно сделать адекватный мультитрединг в этом случае)
// в цк2 все сущности строго определены, все действия строго определены, и моддер просто 
// составлял в текстовом файле последовательность условий, и игра их пыталась исполнить

// как мы будем делать обход? чекаем тип, обходим вектор, проверяем каждого персонажа,
// но мне можно не проверять уже стриггеренные эвенты, я так понимаю что тут нужно проверять 
// мапу (?) для того чтобы проверки не делать, нет, нужно создать несколько векторов 
// с парочкой данных для каждого таргета (двумерный массив? так или иначе нужно как то запомнить когда первый раз триггернули)
// мапу заводить для каждого персонажа? нам в любом случае нужен механизм для 
// запоминания флага (тега), мы можем просто рядом запомнить время флага
// это нам поможет с эвентами, что с решениями? решения нужно разбить по типам
// одни типы пойдут в окно решений, другие по правой кнопке будут открываться,
// нужно придумать фильтр, нужно как то ограничить дальность взаимодействий персонажей,
// возможно даже ограничить взаимодействие с чужими вассалами
// некоторые решения должны быть написаны от руки (например женитьба и какие то такие вещи)
// причем наверное нужно сделать отдельно дипломатию, чтобы автоматизировать некоторые вещи
// вообщем нужно придумать серьезные ограничения

// 

#endif
